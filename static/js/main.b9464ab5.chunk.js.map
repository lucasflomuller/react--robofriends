{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","previousState","objectSpread","count","state","nextProps","nextState","react_default","a","createElement","color","props","onClick","Component","Header","components_CounterButton","Card","_ref","name","email","id","className","src","concat","alt","CardList","cardComponent","robots","map","robot","i","components_Card","key","SearchBox","searchField","searchChange","htmlFor","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundart","hasError","error","info","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b9464ab5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) return true;\r\n    return false;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(previousState => ({ ...previousState, count: previousState.count + 1 }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n \r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1>Robofriends</h1>\r\n        <CounterButton color={'red'} />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow b2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"Profile\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardComponent = robots.map((robot, i) => (\r\n    <Card key={i} id={robot.id} name={robot.name} email={robot.email} />\r\n  ));\r\n\r\n  // if (true) {\r\n  //   throw new Error('NOOOOOOOOO!')\r\n  // }\r\n  \r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <label htmlFor=\"searchBoxField\">Search robots:</label>\r\n      <input\r\n        id=\"searchBoxField\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"600px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  \r\n  render() { \r\n    if (this.state.hasError) {\r\n      return <h2>Oooops. That is not good.</h2>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n \r\nexport default ErrorBoundart;","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport Header from \"../components/Header\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n    return isPending ?\r\n      <h1>Loading...</h1> :\r\n      (\r\n      <div className=\"tc\">\r\n        <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n      </div>\r\n      )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport \"tachyons\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\"));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}